import java.text.SimpleDateFormat
import java.util.stream.Collectors

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://jitpack.io'
            content {
                includeGroup "com.github.RyanTheAllmighty.gettext"
                // includeGroup "com.github.fvarrui"
                // includeGroup "com.github.fvarrui.JavaPackager"
            }
        }
    }
    dependencies {
        classpath 'com.github.RyanTheAllmighty.gettext:gettext-gradle-plugin:aab5c30bf8'
        classpath 'io.github.fvarrui:javapackager:1.6.7'
        // classpath 'com.github.fvarrui:JavaPackager:9e46a860a8'
    }
}

plugins {
    id 'java'
    id 'application'

    id 'org.cadixdev.licenser' version '0.6.1'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'de.undercouch.download' version '5.1.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.apollographql.apollo' version '2.5.14'
}

apply plugin: 'org.mini2Dx.gettext'
apply plugin: 'io.github.fvarrui.javapackager.plugin'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

group = 'com.atlauncher'
version = rootProject.file('src/main/resources/version').text.trim().replace('.Beta', '')

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        url 'https://libraries.minecraft.net'
    }
    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.RyanTheAllmighty.gettext"
            includeGroup "com.github.Vatuu"
        }
    }
}

dependencies {
    implementation 'net.java.dev.jna:jna:5.11.0'
    implementation 'net.java.dev.jna:jna-platform:5.11.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.tukaani:xz:1.9'
    implementation 'com.mojang:authlib:1.5.21'
    implementation 'net.iharder:base64:2.3.9'
    implementation 'com.github.Vatuu:discord-rpc:1.6.2'
    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'
    implementation 'org.zeroturnaround:zt-zip:1.15'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:okhttp-tls:4.9.3'
    implementation 'net.mikehardy:google-analytics-java:2.0.11'
    implementation 'io.sentry:sentry:6.1.4'
    implementation 'com.github.RyanTheAllmighty.gettext:gettext-lib:88ae68d897'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'com.sangupta:murmur:1.0.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'com.formdev:flatlaf:2.3'
    implementation 'com.formdev:flatlaf-extras:2.3'
    implementation 'com.github.oshi:oshi-core:6.1.6'
    implementation 'net.freeutils:jlhttp:2.6'
    implementation 'joda-time:joda-time:2.10.14'
    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'org.commonmark:commonmark:0.19.0'
    implementation 'com.github.hypfvieh:dbus-java:3.3.1'
    implementation 'com.apollographql.apollo:apollo-runtime:2.5.14'
    implementation 'com.apollographql.apollo:apollo-http-cache:2.5.14'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.assertj:assertj-swing-junit:3.17.1'
    testImplementation 'org.mock-server:mockserver-netty:5.13.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.2'
}

application {
    mainClass = 'com.atlauncher.App'
    applicationDefaultJvmArgs = [
        "-Djna.nosys=true",
        "-Djava.net.preferIPv4Stack=true",
        "-Dawt.useSystemAAFontSettings=on",
        "-Dswing.aatext=true"
    ]
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    testlogger {
        theme 'mocha'
    }
}

jar {
    manifest {
        attributes(
                'SplashScreen-Image': '/assets/image/splash-screen.png',
                'Implementation-Title': project.name,
                'Implementation-Version': archiveVersion,
                'Implementation-Vender': 'ATLauncher',
                'Main-Class': 'com.atlauncher.App',
                'Multi-Release': 'true'
        )
    }
}

apollo {
    customTypeMapping = [
        "ID" : "java.lang.String",
        "DateTime" : "java.util.Date"
    ]
    packageName = "com.atlauncher.graphql"
}

gettext {
    translations {
        srcDir = 'src'
        include = 'main/java/com/atlauncher/**/*.java'
        excludes = [
            'main/java/com/atlauncher/adapter/**/*.java',
            'main/java/com/atlauncher/annot/**/*.java',
            'main/java/com/atlauncher/collection/**/*.java',
            'main/java/com/atlauncher/evnt/**/*.java',
            'main/java/com/atlauncher/exceptions/**/*.java',
            'main/java/com/atlauncher/interfaces/**/*.java',
            'main/java/com/atlauncher/listener/**/*.java',
            'main/java/com/atlauncher/utils/**/*.java'
        ]
        commentFormat = ' #. '
        outputFilename = 'translations.pot'
    }
}

license {
    header = project.file('LICENSEHEADER')
    include '**/*.java'
    exclude 'io/github/**/*.java'
    exclude 'net/minecraft/**/*.java'
    exclude 'com/atlauncher/graphql/**/*.java'
    exclude 'com/atlauncher/gui/layouts/WrapLayout.java'
    newLine = false
    properties {
        year = currentYear()
    }
}

shadowJar {
    classifier = null
    minimize {
        exclude(dependency('org.apache.logging.log4j:.*:.*'))
        exclude(dependency('com.formdev:.*:.*'))
        exclude(dependency('com.github.jnr:.*:.*'))
        exclude(dependency('com.github.hypfvieh:.*:.*'))
        exclude(dependency('org.apache.commons:commons-compress:.*'))
    }

    // these are included by dbus-java which is only used on Linux
    exclude("jni/x86_64-Windows/")
    exclude("jni/x86_64-SunOS/")
    exclude("jni/x86_64-OpenBSD/")
    exclude("jni/x86_64-FreeBSD/")
    exclude("jni/x86_64-DragonFlyBSD/")
    exclude("jni/sparcv9-SunOS/")
    exclude("jni/ppc-AIX/")
    exclude("jni/ppc64-AIX/")
    exclude("jni/i386-Windows/")
    exclude("jni/i386-SunOS/")
    exclude("jni/Darwin/")

    classifier = ''
}

javapackager {
    mainClass = 'com.atlauncher.App'

    name = "atlauncher"
    displayName = "ATLauncher"

    assetsDir = file("${projectDir}/packaging/javapackager")

    bundleJre = false
    customizedJre = false

    generateInstaller = false
    administratorRequired = false

    runnableJar = file(project.tasks.jar.getArchivePath().getPath())
    copyDependencies = false
    administratorRequired = false

    url = "https://atlauncher.com"
    vmArgs = [
        "-Djna.nosys=true",
        "-Djava.net.preferIPv4Stack=true",
        "-Dawt.useSystemAAFontSettings=on",
        "-Dswing.aatext=true"
    ]

    organizationName = "ATLauncher"
    organizationUrl = "https://atlauncher.com"
}

task copyVersionedJarToUnversionedJar(type: Copy, dependsOn: build) {
    doFirst {
        delete "${buildDir}/libs/ATLauncher.jar"
    }
    from project.tasks.jar.getArchivePath().getPath()
    into "${buildDir}/libs"
    rename "ATLauncher-${version}.jar", "ATLauncher.jar"
}

task downloadBundledJavaForArmMac(type: Download) {
    src 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.5%2B8/OpenJDK17U-jre_aarch64_mac_hotspot_17.0.5_8.tar.gz'
    dest file("$buildDir/bundledJre/OpenJDK17U-jre_aarch64_mac_hotspot_17.0.5_8.tar.gz")
    overwrite false
}
task verifyJavaForArmMac(type: Verify, dependsOn: downloadBundledJavaForArmMac) {
    src file("$buildDir/bundledJre/OpenJDK17U-jre_aarch64_mac_hotspot_17.0.5_8.tar.gz")
    algorithm 'SHA-256'
    checksum 'd98b7f5ee6cb4a1c49288bd932008e3e37f9bb5d9a0eb9396ea236786e6ab570'
}
task extractJavaForArmMac(type: Copy, dependsOn: verifyJavaForArmMac) {
    doFirst {
        delete "$buildDir/bundledJre/armMac/"
    }
    from tarTree(resources.gzip("$buildDir/bundledJre/OpenJDK17U-jre_aarch64_mac_hotspot_17.0.5_8.tar.gz"))
    into file("$buildDir/bundledJre/armMac/")
}
task packageForArmMac(type: io.github.fvarrui.javapackager.gradle.PackageTask, dependsOn: ['copyVersionedJarToUnversionedJar', 'extractJavaForArmMac']) {
    platform = 'mac'
    bundleJre = true
    jrePath = file("$buildDir/bundledJre/armMac/jdk-17.0.5+8-jre/Contents/Home")
    runnableJar = file("${buildDir}/libs/ATLauncher.jar")
    copyDependencies = false
    outputDirectory = file("${buildDir}/macapp/aarch64/")
    generateInstaller = true

    macConfig {
        macStartup = 'ARM64'

        appId = "com.atlauncher.ATLauncher"
        icnsFile = file("${projectDir}/packaging/javapackager/mac/atlauncher.icns")
        generateDmg = true
        generatePkg = false
        relocateJar = true

        codesignApp = false
    }
    doLast {
        delete "${buildDir}/bundledJre/armMac"

        copy {
            from("${buildDir}/macapp/aarch64/ATLauncher_${project.version}.dmg") {
                rename "ATLauncher_${project.version}.dmg", "ATLauncher_${project.version}_aarch64.dmg"
            }
            into "${projectDir}/dist"
        }
    }
}

task downloadBundledJavaForx64Mac(type: Download) {
    src 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.5%2B8/OpenJDK17U-jre_x64_mac_hotspot_17.0.5_8.tar.gz'
    dest file("$buildDir/bundledJre/OpenJDK17U-jre_x64_mac_hotspot_17.0.5_8.tar.gz")
    overwrite false
}
task verifyJavaForx64Mac(type: Verify, dependsOn: downloadBundledJavaForx64Mac) {
    src file("$buildDir/bundledJre/OpenJDK17U-jre_x64_mac_hotspot_17.0.5_8.tar.gz")
    algorithm 'SHA-256'
    checksum 'c4884b6cd8d43497ff46e4fd475ddde5ab91004db435f0c29a801b081662f7ee'
}
task extractJavaForx64Mac(type: Copy, dependsOn: verifyJavaForx64Mac) {
    doFirst {
        delete "$buildDir/bundledJre/x64Mac/"
    }
    from tarTree(resources.gzip("$buildDir/bundledJre/OpenJDK17U-jre_x64_mac_hotspot_17.0.5_8.tar.gz"))
    into file("$buildDir/bundledJre/x64Mac/")
}
task packageForX64Mac(type: io.github.fvarrui.javapackager.gradle.PackageTask, dependsOn: ['copyVersionedJarToUnversionedJar', 'extractJavaForx64Mac']) {
    platform = 'mac'
    bundleJre = true
    jrePath = file("$buildDir/bundledJre/x64Mac/jdk-17.0.5+8-jre/Contents/Home")
    runnableJar = file("${buildDir}/libs/ATLauncher.jar")
    copyDependencies = false
    outputDirectory = file("${buildDir}/macapp/x64/")
    generateInstaller = true

    macConfig {
        macStartup = 'X86_64'

        appId = "com.atlauncher.ATLauncher"
        icnsFile = file("${projectDir}/packaging/javapackager/mac/atlauncher.icns")
        generateDmg = true
        generatePkg = false
        relocateJar = true

        codesignApp = false
    }
    doLast {
        delete "${buildDir}/bundledJre/armMac"

        copy {
            from("${buildDir}/macapp/x64/ATLauncher_${project.version}.dmg") {
                rename "ATLauncher_${project.version}.dmg", "ATLauncher_${project.version}_x64.dmg"
            }
            into "${projectDir}/dist"
        }
    }
}
task packageForMac(dependsOn: [ 'packageForArmMac', 'packageForX64Mac' ])

task downloadBundledJavaForLinux(type: Download) {
    src 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.5%2B8/OpenJDK17U-jre_x64_linux_hotspot_17.0.5_8.tar.gz'
    dest file("$buildDir/bundledJre/OpenJDK17U-jre_x64_linux_hotspot_17.0.5_8.tar.gz")
    overwrite false
}
task verifyJavaForLinux(type: Verify, dependsOn: downloadBundledJavaForLinux) {
    src file("$buildDir/bundledJre/OpenJDK17U-jre_x64_linux_hotspot_17.0.5_8.tar.gz")
    algorithm 'SHA-256'
    checksum '11326464a14b63e6328d1d2088a23fb559c0e36b3f380e4c1f8dcbe160a8b95e'
}
task extractJavaForLinux(type: Copy, dependsOn: verifyJavaForLinux) {
    doFirst {
        delete "$buildDir/bundledJre/linux/"
    }
    from tarTree(resources.gzip("$buildDir/bundledJre/OpenJDK17U-jre_x64_linux_hotspot_17.0.5_8.tar.gz"))
    into file("$buildDir/bundledJre/linux/")
}
task packageForLinux(type: io.github.fvarrui.javapackager.gradle.PackageTask, dependsOn: ['build', 'extractJavaForLinux']) {
    platform = 'linux'
    outputDirectory = file("${buildDir}/linux/")

    linuxConfig {
        generateInstaller = true
        generateAppImage = true
        generateDeb = true
        generateRpm = true
        wrapJar = false

        useResourcesAsWorkingDir = true

        bundleJre = true
        jrePath = file("$buildDir/bundledJre/linux/jdk-17.0.5+8-jre")
        jreDirectoryName = "jre"

        description = "A launcher for Minecraft which integrates multiple different modpacks to allow you to download and install modpacks easily and quickly."
        categories = [
            "Game"
        ]
        extra = [
            linuxKeywords: [
                "game",
                "Minecraft"
            ]
        ]
    }

    doLast {
        delete "${buildDir}/bundledJre/linux"

        copy {
            from("${buildDir}/linux/atlauncher_${project.version}.deb") {
                rename "atlauncher_${project.version}.deb", "ATLauncher_${project.version}.deb"
            }
            from("${buildDir}/linux/atlauncher_${project.version}.rpm") {
                rename "atlauncher_${project.version}.rpm", "ATLauncher_${project.version}.rpm"
            }
            from("${buildDir}/linux/atlauncher.AppImage") {
                rename "atlauncher.AppImage", "ATLauncher_${project.version}.AppImage"
            }
            into "${projectDir}/dist"
        }
    }
}

task downloadBundledJavaForWindows(type: Download) {
    src 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.5%2B8/OpenJDK17U-jre_x64_windows_hotspot_17.0.5_8.zip'
    dest file("$buildDir/bundledJre/OpenJDK17U-jre_x64_windows_hotspot_17.0.5_8.zip")
    overwrite false
}
task verifyJavaForWindows(type: Verify, dependsOn: downloadBundledJavaForWindows) {
    src file("$buildDir/bundledJre/OpenJDK17U-jre_x64_windows_hotspot_17.0.5_8.zip")
    algorithm 'SHA-256'
    checksum 'd25a2d44c1bd9c57d49c5e98de274cd40970ab057fe304b52eb459de4ee5d8a5'
}
task extractJavaForWindows(type: Copy, dependsOn: verifyJavaForWindows) {
    doFirst {
        delete "$buildDir/bundledJre/windows/"
    }
    from zipTree("$buildDir/bundledJre/OpenJDK17U-jre_x64_windows_hotspot_17.0.5_8.zip")
    into file("$buildDir/bundledJre/windows/")
}
task packageForWindows(type: io.github.fvarrui.javapackager.gradle.PackageTask, dependsOn: ['build', 'extractJavaForWindows']) {
    platform = 'windows'
    outputDirectory = file("${buildDir}/windows/")

    winConfig {
        generateInstaller = true
        generateSetup = true
        generateMsi = false
        wrapJar = true

        bundleJre = true
        jrePath = file("$buildDir/bundledJre/windows/jdk-17.0.5+8-jre")
        jreDirectoryName = "jre"
        jreMinVersion = "${project.targetCompatibility.toString()}"

        exeCreationTool = "launch4j"

        copyright = "2013-${currentYear()} ${project.name}"
        companyName = "${project.name}"
        productName = "${project.name}"
        fileVersion = "${project.version}"
        productVersion = "${project.version}"

        setupMode = "installForCurrentUser"
        disableWelcomePage = false
        disableDirPage = false
        disableRunAfterInstall = false
        disableFinishedPage = false
        createDesktopIconTask = true
        setupLanguages = [
            "english": "compiler:Default.isl"
        ]

        additionalResources = [
            file("${projectDir}/packaging/javapackager/windows/wizardimage.bmp")
        ]

        icoFile = file("${projectDir}/src/main/resources/assets/image/icon.ico")
    }

    doLast {
        delete "${buildDir}/bundledJre/windows"

        copy {
            from("${buildDir}/windows/ATLauncher_${project.version}.exe") {
                rename "ATLauncher_${project.version}.exe", "ATLauncher_${project.version}_setup.exe"
            }
            from("${buildDir}/windows/ATLauncher/ATLauncher.exe") {
                rename "ATLauncher.exe", "ATLauncher_${project.version}.exe"
            }
            into "${projectDir}/dist"
        }
    }
}

def currentYear() {
    def df = new SimpleDateFormat("yyyy")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

test {
    if (JavaVersion.current().isJava9Compatible()) {
        jvmArgs '--add-opens=java.base/sun.security.x509=ALL-UNNAMED'
    }
}

task copyFatjar(type: Copy) {
    from(shadowJar) {
        rename "ATLauncher-${version}.jar", "ATLauncher_${version}.jar"
    }
    into "${projectDir}/dist"
}

task createTestLauncherDir {
    project.file('testLauncher/dev').mkdirs()
}

clean.doFirst {
    delete "${projectDir}/dist"
}

project.afterEvaluate {
    tasks.check {
        dependsOn -= tasks.find {
            it.name.equals("checkLicenses")
        }
    }
}

def shouldIgnoreUpdate = { String version -> return ['ALPHA', 'BETA', 'RC', '-M'].any { it -> version.toUpperCase().contains(it) }}
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        shouldIgnoreUpdate(it.candidate.version)
    }
}

shadowJar.dependsOn jar
build.finalizedBy copyFatjar
